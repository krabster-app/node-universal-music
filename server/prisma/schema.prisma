generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SOVOK_DATABASE_URL")
}

model User {
  id        String    @id
  email     String    @unique
  name      String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model TrackInfo {
  id             String  @id @default(uuid())
  title          String
  length         Int
  disambiguation String?
  coverUrl       String? // http://coverartarchive.org/release/{MBID}/front-250/500/1200

  artistsMap TrackToArtist[]
  artistFull String
  releaseMap TrackToRelease[]

  tags            String[]
  trackOnPlatform TrackOnPlatform[]
  playlistedIn    TrackToPlaylist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtistInfo {
  id        String          @id @default(uuid())
  name      String
  tracksMap TrackToArtist[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model TrackToArtist {
  id        String     @id @default(uuid())
  trackId   String
  track     TrackInfo  @relation(fields: [trackId], references: [id])
  artistId  String
  artist    ArtistInfo @relation(fields: [artistId], references: [id])
  prefix    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([trackId, artistId])
}

model ReleaseInfo {
  id             String  @id @default(uuid())
  title          String
  status         String // 'Official'
  disambiguation String? // 'clean'

  tracksMap TrackToRelease[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrackToRelease {
  id        String      @id @default(uuid())
  trackId   String
  track     TrackInfo   @relation(fields: [trackId], references: [id])
  releaseId String
  release   ReleaseInfo @relation(fields: [releaseId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([trackId, releaseId])
}

enum Platform {
  Youtube
  Yandex
  VK
}

model TrackOnPlatform {
  id          String    @id @default(uuid())
  platform    Platform
  trackInfoId String
  trackInfo   TrackInfo @relation(fields: [trackInfoId], references: [id])
  key         String
  meta        Json

  @@unique([platform, trackInfoId])
}

model TrackToPlaylist {
  id String @id @default(uuid())

  trackId    String
  track      TrackInfo @relation(fields: [trackId], references: [id])
  playlistId String
  playlist   Playlist  @relation(fields: [playlistId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trackId, playlistId])
}

model Playlist {
  id    String @id @default(uuid())
  title String

  tracks TrackToPlaylist[]

  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
